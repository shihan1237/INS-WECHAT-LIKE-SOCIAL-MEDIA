import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import { getPosts, updatePostByPidWithLike, updatePostByPidWithUnlike, updatePostByPidWithComment } from './api/PostsAPI';
import getCurUser from './api/CurUserAPI';
import ReplyComponent from '../components/ReplyComponent';
import PostContent from '../components/postContent';
import styles from '../styles/index.module.css'
import NavBar from '../components/NavBar';
import CommentBox from '../components/CommentBox';



export default function Home() {
  const [posts, setPosts] = useState([]);
  const [likeBoxOnfocus, setLikeBoxOnfocus] = useState([]);
  const [showComment, setShowComment] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [curUser, setCurUser] = useState({});
  const [curPostIndex, setCurPostIndex] = useState(0);
  const [showPostBox, setShowPostBox] = useState(false);
  useEffect(() => {
    const APIpost = getPosts();
    const APICurUser = getCurUser();
    setPosts(APIpost)
    setCurUser(APICurUser)
    const likeBoxOnfocusArr = new Array(APIpost.length)
    for (let i = 0; i < likeBoxOnfocusArr.length; i++) {
      likeBoxOnfocusArr[i] = false;
    }
    setLikeBoxOnfocus(likeBoxOnfocusArr);

  }, []);
  const activateBox = (index) => {
    let tmp = []
    for (let i = 0; i < likeBoxOnfocus.length; i++) {
      if (i != index) {
        tmp[i] = likeBoxOnfocus[i]
      }
      else {
        tmp[i] = true
      }
    }
    setLikeBoxOnfocus(tmp)
  }
  const inactivateBox = (index) => {
    let tmp = []
    for (let i = 0; i < likeBoxOnfocus.length; i++) {
      if (i != index) {
        tmp[i] = likeBoxOnfocus[i]
      }
      else {
        tmp[i] = false
      }
    }
    setLikeBoxOnfocus(tmp)
  }

  const handleLike = (index) => {
    const pid = posts[index]._id;
    let APIpost;
    if (posts[index].reply.likes.includes(curUser.username)) {
      APIpost = updatePostByPidWithUnlike(pid, curUser.username, index);
    } else {
      APIpost = updatePostByPidWithLike(pid, curUser.username, index);
    }

    setPosts(APIpost)
  }

  const handleComment = (index) => {
    setShowComment(true);
    setTimeout(() => { document.querySelector('.commentBox').focus(); }, 100);
    setCurPostIndex(index)


  }
  const handleSubmit = (e) => {
    console.log(e)
    // e.preventDefault();
  }
  const handleNavBar = (userOnclick, sendPostOnclick) => {
    if (userOnclick) {

      return
    }

    if (sendPostOnclick === true) {
      setShowPostBox(true)
    } else {
      setShowPostBox(false)
    }
  }

  return (
    <div>
      <Head>
        <title>ins-wechat-like-social-media</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <div className="relative max-w-screen-sm mx-auto my-0 bg-white z-0">
        <NavBar func={handleNavBar} />
        <CommentBox show={showPostBox} func={handleNavBar} />
        <header className="mb-5">
          <div
            className="bg-cover bg-no-repeat bg-center h-96
            bg-[url(/img/bg.png)]">
          </div>

          <div className="flex -mt-16 items-center justify-end relative">
            <span className="inline-block text-base text-white">{curUser.username}</span>
            <a className=" p-0.5 my-0 mx-2 border bg-white" href="#">
              <Image className='w-20 h-20' src={require("@/public/img/avatar1.png")} alt="" /></a>
          </div>
        </header>
        <div className="moments-list z-1">
          {/* Post Content */}
          {
            posts.map((post, index) => {
              const user = post.user;
              const content = post.content;
              return (
                <div className='flex py-5 px-3 border-b
                 border-b-slate-100 text-base relative' key={index}>

                  <a className=" w-10 h-10 mr-2" href="#">
                    <img src={user.avatar} width="42" height="42" alt="" />
                  </a>

                  <div className=" flex-1 overflow-hidden">
                    <a href="#" className="text-sky-800 text-base"> {user.username} </a>

                    <PostContent content={content}></PostContent>
                    <div className="item-ft relative mb-3">
                      <span className=" text-slate-400 text-sm">
                        {content.timeString}
                      </span>
                      <div className=
                        " item-reply-btn absolute right-0 top-0 w-9 text-right h-9 z-2 bg-white cursor-pointer "
                        tabIndex="1"
                        onBlur={() => { inactivateBox(index) }}

                        onClick={() => {
                          if (likeBoxOnfocus[index]) document.activeElement.blur()
                          else {
                            activateBox(index)
                          }
                        }}>
                        <span className={'item-reply w-4 h-3 inline-block bg-commentBlue align-middle relative '
                          + styles.itemExtend}>
                          {
                            <div className=
                              {'absolute -left-44 top-0 w-44 flex bg-gray-900 overflow-hidden whitespace-nowrap text-white opacity-60 '
                                + styles.itemLike + ' ' +
                                (likeBoxOnfocus[index] ? styles.itemLikeShow : styles.itemLikeHidden)}>
                              <span onClick={() => { handleLike(index) }}>
                                {post.reply.likes.includes(curUser.username) ? '取消' : '点赞'}</span>
                              <span onClick={() => { handleComment(index) }}>评论</span>
                            </div>
                          }


                        </span>
                      </div>
                    </div>
                    <ReplyComponent reply={post.reply}></ReplyComponent>
                  </div>
                </div>
              )
            })
          }



        </div>
        <form onSubmit={(e) => {
          e.preventDefault();
          const pdata = updatePostByPidWithComment(posts[curPostIndex]._id, curUser, curPostIndex, inputValue);
          console.log(pdata)
          setPosts(pdata)
        }} className={(showComment ? '' : 'invisible ') +
          ' fixed bottom-0 left-0 bg-gray-200 flex overflow-hidden w-full z-3 h-12 '
        } tabIndex='2' onBlur={() => {
          setTimeout(() => {
            setShowComment(false)
          }, 200);
        }}>
          <input type="text" placeholder="评论" value={inputValue} onChange={(e) => {
            setInputValue(e.target.value)
            if (inputValue != '') {
              console.log(123)
              document.querySelector('.submitButton').removeAttribute("disabled");
            } else {
              document.querySelector('.submitButton').setAttribute("disabled", true);
            }

          }}
            className="commentBox flex-grow border-white m-1 ml-2 p-2 overflow-hidden" />
          <button disabled
            className={"submitButton w-14 bg-gray-400 m-1 rounded-md overflow-hidden text-slate-100" +
              ('' == inputValue ? 'bg-gray-200' : ' bg-green-500')}>
            发送</button>
        </form>

      </div>


    </div>
  )


}
